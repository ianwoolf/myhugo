<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dockers on 起风了</title>
    <link>http://106.186.127.250:1313/blog/docker/</link>
    <description>Recent content in Dockers on 起风了</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Oct 2015 16:31:14 +0800</lastBuildDate>
    <atom:link href="http://106.186.127.250:1313/blog/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>制作带有ssh的docker镜像,转,小修改并亲测</title>
      <link>http://106.186.127.250:1313/blog/docker/%E5%88%B6%E4%BD%9C%E5%B8%A6%E6%9C%89ssh%E7%9A%84ubantu%E9%95%9C%E5%83%8F/</link>
      <pubDate>Tue, 20 Oct 2015 16:31:14 +0800</pubDate>
      
      <guid>http://106.186.127.250:1313/blog/docker/%E5%88%B6%E4%BD%9C%E5%B8%A6%E6%9C%89ssh%E7%9A%84ubantu%E9%95%9C%E5%83%8F/</guid>
      <description>

&lt;h2 id=&#34;手动搞-然后commit:e26601a9b94b90b70d0c8c0bcf072033&#34;&gt;手动搞，然后commit&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;个人最爱的方式,我喜欢手动搞出来,然后用dockerfile搞启动命令/环境/网络等&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;步骤如下：&lt;/p&gt;

&lt;p&gt;首先，使用我们最熟悉的 「-ti」参数来创建一个容器(我之前的小黑是14.10的，所以没用04的，直接用的lastext):&lt;code&gt;$ sudo docker run -ti ubuntu  /bin/bash&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@fc1936ea8ceb:/# sshd
bash: sshd: command not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 sshd 开启 ssh server 服务,发现没有安装这个服务,注意，我们在使用 「-ti /bin/bash」 进入容器后，获得的是 root 用户的bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@fc1936ea8ceb:/# apt-get install openssh-server
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following extra packages will be installed:
ca-certificates krb5-locales libck-connector0 libedit2 libgssapi-krb5-2
 libidn11 libk5crypto3 libkeyutils1 libkrb5-3 libkrb5support0
 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libwrap0 libx11-6
。。。。
Do you want to continue? [Y/n] y    
。。。，，
Setting up ssh-import-id (3.21-0ubuntu1) ...
Processing triggers for libc-bin (2.19-0ubuntu6.6) ...
Processing triggers for ca-certificates (20130906ubuntu2) ...
Updating certificates in /etc/ssl/certs... 164 added, 0 removed; done.
Running hooks in /etc/ca-certificates/update.d....done.
Processing triggers for ureadahead (0.100.0-16) ...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;14.04的ubantu的docker镜像没有sshd，lastest是有的。&lt;strong&gt;如果要用04，还需要先升级下apt-get&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要建立一个文件夹&lt;code&gt;mkdir -p /var/run/sshd&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# /usr/sbin/sshd -D &amp;amp;
root@fc1936ea8ceb:/# netstat -ntlp
    Active Internet connections (only servers)
    Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
    tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      3238/sshd       
    tcp6       0      0 :::22                   :::*                    LISTEN      3238/sshd   
# mkdir root/.ssh
# vi /root/.ssh/authorized_keys  #把中控机或者常用机器的公钥填进去（如非有中控，推荐以后空着）
# sed -ri &#39;s/session    required     pam_loginuid.so/#session    required     pam_loginuid.so/g&#39; /etc/pam.d/sshd  #修改 ssh 服务的安全登陆配置

# 启动docker时执行的初始化脚本，这里写的启动ssh。这个应该做成开机启动，这里仅做示例
# vi /run.sh 
# chmod +x run.sh
# cat /run.sh
   #!/bin/bash
    /usr/sbin/sshd -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后我们退出，保存镜像&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# exit
$ sudo docker commit  xxxx sshd:ubantu  #xxx为刚才容器的CONTAINER ID
$ sudo docker  images   # 查看是否有了
    REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
    sshd                ubuntu              7aef2cd95fd0        10 seconds ago      255.2 MB
    ubuntu              latest              ba5877dc9bec        3 months ago        192.7 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;我们来验证，启动一个container，连docker主机&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker  run -p 100:22  -d sshd:ubuntu /run.sh  #启动容器，并映射端口 100 --&amp;gt;22
    3ad7182aa47f9ce670d933f943fdec946ab69742393ab2116bace72db82b4895
$ sudo docker ps
#找一台机器，连过去试试

$ ssh root@xxxx -p 100   #xxxx 是docker主机的ip，100是端口号。  这个跟container启动方式有关
    。。。。
    Are you sure you want to continue connecting (yes/no)? yes
。。。。
root@3ad7182aa47f:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;成功登陆，镜像创建成功。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;run.sh 脚本内容&lt;/p&gt;

&lt;h2 id=&#34;dockerfile搞:e26601a9b94b90b70d0c8c0bcf072033&#34;&gt;dockerfile搞&lt;/h2&gt;

&lt;p&gt;首先，创建一个叫做 sshd_ubuntu 的文件夹，用于存放我们的 Dockerfile 、脚本文件、以及其他文件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir sshd_ubuntu
$ cd sshd_ubuntu/
$ touch Dockerfile run.sh
$ ls
    Dockerfile  run.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编写 run.sh(启动sshd，同上) 和 authorized_keys（登陆公钥，根据自己情况选择）&lt;code&gt;$ cat ~/.ssh/id_rsa.pub &amp;gt;authorized_keys&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重点来了，下面是 Dockerfile 的内容&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM ubuntu:latest  #设置继承镜像


MAINTAINER dwj_zz@163.com #作者的信息
#更改源，根据自己需求，我改的网易的源
RUN echo &amp;quot;deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse&amp;quot; &amp;gt; /etc/apt/sources.list
RUN echo &amp;quot;deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN echo &amp;quot;deb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN echo &amp;quot;deb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN echo &amp;quot;deb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN apt-get update

#安装 ssh 服务
RUN apt-get install -y openssh-server
RUN mkdir -p /var/run/sshd
RUN mkdir -p /root/.ssh
#取消pam限制
RUN sed -ri &#39;s/session    required     pam_loginuid.so/#session    required     pam_loginuid.so/g&#39; /etc/pam.d/sshd

#复制配置文件到相应位置,并赋予脚本可执行权限
ADD authorized_keys /root/.ssh/authorized_keys
ADD run.sh /run.sh
RUN chmod 755 /run.sh

#开放端口
EXPOSE 22

#设置自启动命令
CMD [&amp;quot;/run.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建镜像&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker build -t sshd:dockerfile .
    Sending build context to Docker daemon 5.632 kB
    Sending build context to Docker daemon
    Step 0 : FROM ubuntu:latest
     ---&amp;gt; ba5877dc9bec
    Step 1 : MAINTAINER dwj_zz@163.com
     ---&amp;gt; Running in 188d74d02d35
     ---&amp;gt; 473eb019b331
    Removing intermediate container 188d74d02d35
    # 使用 Dockerfile 创建，他会帮你删除中间无用的文件层
    Step 2 : RUN echo &amp;quot;deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse&amp;quot; &amp;gt; /etc/apt/sources.list
     ---&amp;gt; Running in f52e2a583db5
     ---&amp;gt; bd4ceef2ee19
    Removing intermediate container f52e2a583db5
    Step 3 : RUN echo &amp;quot;deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
......
    Step 15 : EXPOSE 22
     ---&amp;gt; Running in 660a57c41b25
     ---&amp;gt; 3ff9e88c4847
    Removing intermediate container 660a57c41b25
    Step 16 : CMD /run.sh
    ---&amp;gt; Running in 5a0d838b6759
    ---&amp;gt; 532f12181013
    Removing intermediate container 5a0d838b6759
    Successfully built 532f12181013
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，返回告诉我们创建成功，镜像 id 号是532f12181013，让我们来查看下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL     SIZE
sshd                dockerfile          532f12181013        7 seconds ago       242 MB
sshd                ubantu              08fdb11b77b5        About an hour ago   229.9 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，测试镜像，运行容器。同上，不在赘述。
&lt;strong&gt;注意到，后面跟上面手动搞镜像启动命令不一样，不需要在输入命令‘/run.sh’了，因为已经在 Dockerfile 中定义了自启动命令。&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用docker起golang的gin服务</title>
      <link>http://106.186.127.250:1313/blog/docker/%E7%94%A8docker%E8%B5%B7gin%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 20 Oct 2015 16:31:14 +0800</pubDate>
      
      <guid>http://106.186.127.250:1313/blog/docker/%E7%94%A8docker%E8%B5%B7gin%E6%9C%8D%E5%8A%A1/</guid>
      <description>

&lt;h3 id=&#34;首先启动docker:b6ce1d1065d693b2dafcce54d8ea230a&#34;&gt;首先启动docker&lt;/h3&gt;

&lt;p&gt;看到一个可耐的鲸鱼，下面有docker地址，如下语句&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker is configured to use the default machine with IP 192.168.99.100
For help getting started, check out the docs at https://docs.docker.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意里面的ip，这是docker主机的ip，后面连接container的时候需要通过docker主机的端口转发过去&lt;/p&gt;

&lt;p&gt;下面是查找、下载、导出镜像用到的语句&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker search golang   查找镜像
docker  pull golang:1.4.2
docker save -o go-1.4.img golang:1.4.2   导出镜像
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;开始一个container:b6ce1d1065d693b2dafcce54d8ea230a&#34;&gt;开始一个container&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker run -it -p 10101:8080 -v `pwd`/code/go/src/:/go/src/:rw golang:1.4.2 go run /go/src/myLab/golang/gin/main.go

* -p进行端口转发，docker主机10101 转发到container的8080（gin server端口）
* -v进行挂载（绝对路径），机器的·pwd·/code/go/src,挂在的container的/go/src。注意依赖
* 加-d后台运行
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker ip is 10101   这个端口被转发到container的8080&lt;/p&gt;

&lt;p&gt;这样即可跑起来，可curl请求docker主机端口，转发到container进行访问&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl 192.168.99.100:10101/room/
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>